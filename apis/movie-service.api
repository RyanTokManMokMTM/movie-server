syntax = "v1"

//info(
//    title: "type title here"
//    desc: "type desc here"
//    author: "type author here"
//    email: "type email here"
//    version: "type version here"
//)
import "./user.api"
import "./movie.api"
import  "./user_movie_list.api"
import  "./list_movie.api"
import "./liked_movie.api"

type (
	HealthCheckReq  struct{}
	HealthCheckResp {
		Result string `json:"result"`
	}
)

//Health service

@server (
	group : health
)
service MovieService {
	@doc "server health check"
	@handler HealthCheck
	get /ping(HealthCheckReq) returns (HealthCheckResp);
}

//User Service
@server (
	group: user
	prefix: /api/v1
)
service MovieService {
	@doc "user_login"
	@handler UserLogin
	post /user/login(UserLoginRequest)  returns (UserLoginResponse);
	
	@doc "user_register"
	@handler  UserSignUp
	post /user/signup(UserSignUpRequest) returns (UserSignUpResponse);
}

@server (
	group: user
	prefix: /api/v1
)
service MovieService{
	@doc "user_info"
	@handler UserInfo
	get /user/info/:id(UserInfoRequest) returns (UserInfoResponse);
}

@server (
	group: user
	prefix: /api/v1
	jwt : Auth
)
service MovieService{
	@doc "user_profile"
	@handler UserProfile
	get /user/profile(UserProfileRequest) returns (UserProfileResponse);
}

//movie service
@server (
	group : movie
	prefix : /api/v1
	
)
service MovieService{
	@doc "get movie by genre"
	@handler MoviePageListByGenre
	get /movies/genre/list(MoviePageListByGenreRequest) returns (MoviePageListByGenreResponse);
	
	@doc "get movie by genre"
	@handler MovieGenreByMovieID
	get /movies/genres(MovieGenresInfoRequest) returns (MovieGenresInfoResponse);
}

//List Detail Service
@server (
	group : listDetail
	prefix : /api/v1
)
service MovieService {
	@doc "Get movies by List ID"
	@handler GetListMovies
	get /list/movies/:list_id(ListDetailInfoReq) returns (ListDetailInfoResp);
}

@server (
	group : listDetail
	prefix : /api/v1
	jwt : Auth
)
service MovieService {
	@doc "Create movie by List ID"
	@handler CreateListMovie
	get /list/movie(CreateListDetailInfoReq) returns (CreateListDetailInfoResp);
	
	@doc "Update movie by ListID"
	@handler UpdateListMovie
	patch /list/movie(UpdateListDetailInfoReq) returns (UpdateListDetailInfoResp);
	
	@doc "Delete movie in ListID"
	@handler DeleteListMovie
	delete /list/movie(DeleteListDetailInfoReq) returns (DeleteListDetailInfoResp);
}

//List Service
@server (
	group : UserMovieList
	prefix : /api/v1
)
service MovieService {
	@doc "get all recent movie list"
	@handler GetAllList
	get /list/lists(ListsReq) returns (ListsResp);
}

@server (
	group : list
	prefix : /api/v1
	jwt: Auth
)
service MovieService {
	@doc "Create user movie list"
	@handler CreateUserMovieList
	post /list(CreateNewUserListReq) returns (CreateNewUserListResp);
	
	@doc "Update user movie list"
	@handler UpdateUserMovieList
	patch /list(UpdateUserListReq) returns (UpdateUserListResp);
	
	@doc "Delete user movie list"
	@handler DeleteUserMovieList
	delete /list(DeleteUserListReq) returns (DeleteListDetailInfoResp)
	
	@doc "Get List By User ID in JWT"
	@handler GetUserList
	get /list/user/lists(UserListReq) returns (UserListResp);
}

//Liked Movies Service

@server (
	group : likedMovie
	prefix : /api/v1
	jwt : Auth
)
service MovieService {
	@doc "Create user liked movie"
	@handler CreateLikedMovie
	post /liked/movie(CreateLikedMovieReq) returns (CreateLikedMovieResp);
	
	@doc "Delete user liked movie"
	@handler DeleteLikedMovie
	delete /liked/movie(DeleteLikedMoviedReq) returns (DeleteLikedMovieResp);
	//
	//	@doc "Check user has liked movie"
	//	@handler CheckUserLikedMovie
	//	get /liked/check/movie(UserLikedMovieReq) returns (UserLikedMovieResp);
	//
	@doc "Get all user liked movie info as a list"
	@handler GetUserLikedMovieList
	get /liked/movies(UserAllLikedMoviesReq) returns (UserAllLikedMoviesResp);
}