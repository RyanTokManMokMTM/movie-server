syntax = "v1"

//info(
//    title: "User API"
//    desc: "apis for users"
//    author: "type author here"
//    email: "type email here"
//    version: "type version here"
//)

type (
	UserLoginRequest {
		Email    string `json:"email" validate:"required,max=32,email"`
		Password string `json:"password" validate:"required,min=8,max=32"`
	}
	UserLoginResponse {
		Token   string `json:"token"`
		Expired int64 `json:"expired"`
	}

	UserSignUpRequest {
		UserName string `json:"name"`
		Email    string `json:"email" validate:"email,max=32"`
		Password string `json:"password" validate:"min=8,max=32"`
//		ConfirmPassword string `json:"confirmPassword" validate:"eqfield=Password"`
	}
	UserSignUpResponse {
		ID   int64  `json:"id"`
		Name string `json:"name"`
		Email string `json:"email"`
	}

	UserInfoRequest {
		ID int64 `path:"id"`
	}

	UserInfoResponse {
		ID   int64  `json:"id"`
		Name string `json:"name"`
		Email string `jsons:"email"`
	}

	UserProfileRequest {}
	UserProfileResponse {
		ID int64 `json:"id"`
		Name string `json:"name"`
		Email string `json:"email"`
		Avatar string `json:"avatar"`
		Cover string `json:"cover"`
//
//		//Need  liked moive list
//		LikedMovies []*LikedMovieInfo `json:"liked_movies"`
	}
)


//User Service
@server (
	group: user
	prefix: /api/v1
)
service MovieService {
	@doc "user_login"
	@handler UserLogin
	post /user/login(UserLoginRequest)  returns (UserLoginResponse);

	@doc "user_register"
	@handler  UserSignUp
	post /user/signup(UserSignUpRequest) returns (UserSignUpResponse);
}

@server (
	group: user
	prefix: /api/v1
)
service MovieService{
	@doc "user_info"
	@handler UserInfo
	get /user/info/:id(UserInfoRequest) returns (UserInfoResponse);
}

@server (
	group: user
	prefix: /api/v1
	jwt : Auth
)
service MovieService{
	@doc "user_profile"
	@handler UserProfile
	get /user/profile(UserProfileRequest) returns (UserProfileResponse);
}


