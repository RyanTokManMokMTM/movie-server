syntax = "v1"

//info(
//    title: "User API"
//    desc: "apis for users"
//    author: "type author here"
//    email: "type email here"
//    version: "type version here"
//)

type (
	UserLoginReq {
		Email    string `json:"email" validate:"required,max=32,email"`
		Password string `json:"password" validate:"required,min=8,max=32"`
	}
	UserLoginResp {
		Token   string `json:"token"`
		Expired int64 `json:"expired"`

		//Refersher?
	}

	UserSignUpReq {
		UserName string `json:"name"`
		Email    string `json:"email" validate:"email,max=32"`
		Password string `json:"password" validate:"min=8,max=32"`
	}
	UserSignUpResp {
		ID   uint  `json:"id"`
		Name string `json:"name"`
		Email string `json:"email"`
	}

	UserInfoReq {
		ID uint `path:"id"`
	}

	UserInfoResp {
		ID   uint `json:"id"`
		Name string `json:"name"`
		Email string `jsons:"email"`
	}

	UserProfileReq {}
	UserProfileResp {
		ID uint `json:"id"`
		Name string `json:"name"`
		Email string `json:"email"`
		Avatar string `json:"avatar"`
		Cover string `json:"cover"`
//
//		//Need  liked moive list
//		LikedMovies []*LikedMovieInfo `json:"liked_movies"`
	}

	CountUserPostReq {}
	CountUserPostResp {}

	CountUserFollowingReq {}
	CountUserFollowingResp {}

	CountUserFollowedReq {}
	CountUserFollowedResp {}
)


//User Service
@server (
	group: user
	prefix: /api/v1
)
service MovieService {
	@doc "user_login"
	@handler UserLogin
	post /user/login(UserLoginReq)  returns (UserLoginResp);

	@doc "user_register"
	@handler  UserSignUp
	post /user/signup(UserSignUpReq) returns (UserSignUpResp);
}

@server (
	group: user
	prefix: /api/v1
)
service MovieService{
	@doc "user_info"
	@handler UserInfo
	get /user/info/:id(UserInfoReq) returns (UserInfoResp);
}

@server (
	group: user
	prefix: /api/v1
	jwt : Auth
)
service MovieService{
	@doc "user_profile"
	@handler UserProfile
	get /user/profile(UserProfileReq) returns (UserProfileResp);
}


