syntax = "v1"

info(
	title: "user api"
	desc: "user api"
	author: "Jackson.tmm"
	email: "ryantokmanmokmtm"
	version: "demo"
)


type (
	UserLoginReq {
		Email    string `json:"email" validate:"required,max=32,email"`
		Password string `json:"password" validate:"required,min=8,max=32"`
	}
	UserLoginResp {
		Token   string `json:"token"`
		Expired int64 `json:"expired"`

		//Refersher?
	}

	UserSignUpReq {
		UserName string `json:"name"`
		Email    string `json:"email" validate:"email,max=32"`
		Password string `json:"password" validate:"min=8,max=32"`
	}
	UserSignUpResp {
		Token string `json:"token"`
		ExpiredTime uint `json:"expired_time"`
	}

	UserInfoReq {
		ID uint `path:"id"`
	}

	UserInfoResp {
		ID   uint `json:"id"`
		Name string `json:"name"`
		Email string `json:"email"`
		Avatar string `json:"avatar"`
		Cover string `json:"cover"`
	}

	UserProfileReq {}
	UserProfileResp {
		ID uint `json:"id"`
		Name string `json:"name"`
		Email string `json:"email"`
		Avatar string `json:"avatar"`
		Cover string `json:"cover"`
		NotificationInfo NotificationCountInfo `json:"notification_info"` //only logged in user will have this information
//
//		//Need  liked moive list
//		LikedMovies []*LikedMovieInfo `json:"liked_movies"`
	}

	UpdateProfileReq {
		Name string `json:"name"`
	}

	UpdateProfileResp {
	}

	UploadImageReq {}
	UploadImageResp{
		Path string `json:"path"`
	}

	CountFriendReq{
		UserId uint `path:"user_id"`
	}
	CountFriendResp{
		Total uint `json:"total"`
	}

	GetFriendListReq{
		UserId uint `path:"user_id"`
	}
	GetFriendListResp{
		Friends []UserInfo `json:"Friends"`
	}

	GetUserFriendRoomListReq {}
	GetUserFriendRoomListResp {
		lists []FriendRoomInfo `json:"lists"`
	}

	FriendNotificationReq{}
	FriendNotificationResp{}

	CommentNotificationReq{}
	CommentNotificationResp{}

	LikesNotificationReq{}
	LikesNotificationResp{}
//
//	CountFollowingReq {
//		UserId uint `path:"user_id"`
//	}
//	CountFollowingResp {
//		Total uint `json:"total"`
//	}
//
//	CountFollowedReq {
//		UserId uint `path:"user_id"`
//	}
//	CountFollowedResp {
//		Total uint `json:"total"`
//	}
//
//	GetFollowingListReq {
//		UserId uint `path:"user_id"`
//	}
//	GetFollowingListResp {
//		Users []UserInfo `json:"following"`
//	}
//
//	GetFollowedListReq {
//		UserId uint `path:"user_id"`
//	}
//	GetFollowedListResp {
//		Users []UserInfo `json:"followed"`
//	}
)

type FriendRoomInfo {
	RoomID uint `json:"id"`
	Info UserInfo `json:"info"`
}

type (
	UserInfo struct {
		ID   uint `json:"id"`
		Name string `json:"name"`
		Avatar string `json:"avatar"`
	}
)

type NotificationCountInfo {
	FriendNotificationCount uint `json:"friend_notification_count"`
	LikesNotificationCount uint `json:"likes_notification_count"`
	CommentNotificationCount uint `json:"comment_notification_count"`
}


//User Service
@server (
	group: user
	prefix: /api/v1
)
service MovieService {
	@doc (
		summary  : "user_login"
	)
	@handler UserLogin
	post /user/login(UserLoginReq)  returns (UserLoginResp);

	@doc (
		summary : "user_register"
	)
	@handler  UserSignUp
	post /user/signup(UserSignUpReq) returns (UserSignUpResp);

}

@server (
	group: user
	prefix: /api/v1
)
service MovieService{
	@doc (
		summary : "user_info"
	)
	@handler UserInfo
	get /user/info/:id(UserInfoReq) returns (UserInfoResp);


	@doc (
		summary : "Count how many friend of the user"
	)
	@handler CountFriend
	get /user/friends/count/:user_id(CountFriendReq) returns (CountFriendResp);

	@doc (
		summary : "Get friend List"
	)
	@handler  GetFriendList
	get /user/friends/list/:user_id(GetFriendListReq) returns (GetFriendListResp);



	//	@doc (
//		summary : "Count how many users have been followed by user"
//	)
//	@handler CountFollowingUser
//	get /user/following/:user_id(CountFollowingReq) returns (CountFollowingResp);
//
//	@doc (
//		summary : "Count how many users is following the user(owner)"
//	)
//	@handler CountFollowedUser
//	get /user/followed/:user_id(CountFollowedReq) returns (CountFollowedResp);
//
//	@doc (
//		summary : "Get Following List"
//	)
//	@handler  GetUserFollowingList
//	get /user/following/list/:user_id(GetFollowingListReq) returns (GetFollowingListResp);
//
//	@doc (
//		summary : "Get Followed List"
//	)
//	@handler  GetUserFollowedList
//	get /user/followed/list/:user_id(GetFollowedListReq) returns (GetFollowedListResp);
}

@server (
	group: user
	prefix: /api/v1
	jwt : Auth
)
service MovieService{
	@doc (
		summary : "user_profile"
	)
	@handler UserProfile
	get /user/profile(UserProfileReq) returns (UserProfileResp);

	@doc (
		summary : "update user profile"
	)
	@handler UpdateUserProfile
	patch /user/profile(UpdateProfileReq) returns (UpdateProfileResp);


	@doc (
		summary : "update user avatar"
	)
	@handler UploadUserAvatar
	patch /user/avatar(UploadImageReq) returns (UploadImageResp);


	@doc (
		summary : "update user cover"
	)
	@handler UploadUserCover
	patch /user/cover(UploadImageReq) returns (UploadImageResp);

	@handler GetFriendRoomList
	get /user/friends/room(GetUserFriendRoomListReq) returns (GetUserFriendRoomListResp);



	@handler ResetFriendNotification
	patch /user/reset/friend/notification(FriendNotificationReq) returns (FriendNotificationResp)

	@handler ResetCommentNotification
	patch /user/reset/comment/notification(CommentNotificationReq) returns (CommentNotificationResp)

	@handler ResetLikesNotification
	patch /user/reset/likes/notification(LikesNotificationReq) returns (LikesNotificationResp)
}


