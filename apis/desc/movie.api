syntax = "v1"

info(
    title: "movie api"
    desc: "movie api"
    author: "Jackson.tmm"
    email: "ryantokmanmokmtm"
    version: "demo"
)

// Request and reponse
type (
    MoviePageListByGenreReq {
        Id uint `path:"genre_id" validate:"numeric"`
    }
    MoviePageListByGenreResp {
        Resp []*MovieInfo `json:"movie_infos"`
    }
//
    MovieGenresInfoReq{
        Id uint `path:"movie_id" validate:"numeric"`
    }
    MovieGenresInfoResp{
        resp []*GenreInfo `json:"genres"`
    }

    MovieDetailReq {
        MovieID uint `path:"movie_id"`
    }
    MovieDetailResp {
        Info MovieDetailInfo `json:"info"`
    }


    CountMovieLikesReq {
        MovieID uint `path:"movie_id"`
    }
    CountMovieLikedResp {
        Count uint  `json:"total_liked"`
    }

    CountMovieCollectedReq {
        MovieID uint `path:"movie_id"`
    }

    CountMovieCollectedResp {
        Count uint  `json:"total_collected"`
    }
)

type (
    MovieInfo {
        MovieID          uint   `json:"id"`
        PosterPath       string  `json:"poster"`
        Title            string  `json:"title"`
        VoteAverage      float64 `json:"vote_average"`
    }

    MovieDetailInfo {
        Adult            bool `json:"adult"`
        BackdropPath     string `json:"backdrop_path"`
        MovieId          uint  `json:"movie_id"`
        OriginalLanguage string `json:"original_language"`
        OriginalTitle    string `json:"original_title"`
        Overview         string `json:"overview"`
        Popularity       float64 `json:"popularity"`
        PosterPath       string `json:"poster_path"`
        ReleaseDate      string `json:"release_date"`
        Title            string `json:"title"`
        RunTime          int64 `json:"run_time"`
        Video            bool `json:"video"`
        VoteAverage      float64 `json:"Vote_average"`
        VoteCount        int64 `json:"vote_count"`

        Genres []GenreInfo `json:"genres"`
    }

    GenreInfo{
        Id uint `json:"id"`
        Name string `json:"name"`
    }
)

@server (
    group : movie
    prefix : /api/v1

)
service MovieService{
    @doc (
        summary : "get movie by genre"
    )
    @handler MoviePageListByGenre
    get /movies/list/:genre_id(MoviePageListByGenreReq) returns (MoviePageListByGenreResp);

    @doc (
        summary : "get movie by genre"
    )
    @handler MovieGenreByMovieID
    get /movies/genres/:movie_id(MovieGenresInfoReq) returns (MovieGenresInfoResp);

    @doc (
        summary : "get movie detail"
    )
    @handler GetMovieDetail
    get /movies/:movie_id(MovieDetailReq) returns (MovieDetailResp);

    @doc (
        summary  : "get total movie liked by user"
    )
    @handler  GetMovieLikedCount
    get /movie/count/liked/:movie_id(CountMovieLikesReq) returns (CountMovieLikedResp);

    @doc (
        summary : "get movie collected by user"
    )
    @handler GetMovieCollectedCount
    get /movie/count/collected/:movie_id(CountMovieCollectedReq) returns (CountMovieCollectedResp);
}