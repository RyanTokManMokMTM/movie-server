syntax = "v1"

//info(
//    title: "type title here"
//    desc: "type desc here"
//    author: "type author here"
//    email: "type email here"
//    version: "type version here"
//)

type (
    CreateLikedMovieReq {
        MovieID uint `json:"movie_id"`
    }
    CreateLikedMovieResp {
    }

    DeleteLikedMoviedReq {
        MovieID uint `json:"movie_id"`
    }
    DeleteLikedMovieResp {}

    AllUserLikedMoviesReq {
        ID uint `path:"user_id"`
    }
    AllUserAllLikedMoviesResp {
        LikedMoviesList []*LikedMovieInfo `json:"liked_movies"`
    }



)

/*
    let id : Int
    let movieName : String
    let genres : [MovieGenre]
    let moviePoster : String

*/

type (

    LikedMovieInfo {
        MovieID uint `json:"id"`
        MovieName string `json:"movie_name"`
        Genres []GenreInfo `json:"genres"`
        MoviePoster string `json:"movie_poster"`
        MovieVoteAvg float64 `json:"vote_average"`
    }

)


@server (
    group : likedMovie
    prefix : /api/v1
)
service MovieService {
    @doc "Get all user liked movie info as a list"
    @handler GetUserLikedMovieList
    get /liked/movies/:user_id(AllUserLikedMoviesReq) returns (AllUserAllLikedMoviesResp);
}

@server (
    group : likedMovie
    prefix : /api/v1
    jwt : Auth
)
service MovieService {
    @doc "Create user liked movie"
    @handler CreateLikedMovie
    post /liked/movie(CreateLikedMovieReq) returns (CreateLikedMovieResp);

    @doc "Delete user liked movie"
    @handler DeleteLikedMovie
    delete /liked/movie(DeleteLikedMoviedReq) returns (DeleteLikedMovieResp);

}