syntax = "v1"

//info(
//    title: "type title here"
//    desc: "type desc here"
//    author: "type author here"
//    email: "type email here"
//    version: "type version here"
//)

type (
    LikedMovieReq {
        MovieID uint `json:"movie_id"`
    }
    LikedMovieResp {}

    AllUserLikedMoviesReq {
        ID uint `path:"user_id"`
    }
    AllUserAllLikedMoviesResp {
        LikedMoviesList []*LikedMovieInfo `json:"liked_movies"`
    }

    IsLikedMovieReq {
        MovieID uint `path:"movie_id"`
    }
    IsLikedMovieResp {
        IsLiked bool `json:"is_liked_movie"`
    }

    RemoveLikedMovieReq  {
        MovieID uint `json:"movie_id"`
    }

    RemoveLikedMovieResp  {
    }


)

/*
    let id : Int
    let movieName : String
    let genres : [MovieGenre]
    let moviePoster : String

*/

type (

    LikedMovieInfo {
        MovieID uint `json:"id"`
        MovieName string `json:"movie_name"`
        Genres []GenreInfo `json:"genres"`
        MoviePoster string `json:"movie_poster"`
        MovieVoteAvg float64 `json:"vote_average"`
    }

)


@server (
    group : likedMovie
    prefix : /api/v1
)
service MovieService {
    @doc "Get all user liked movie info as a list"
    @handler GetUserLikedMovieList
    get /liked/movies/:user_id(AllUserLikedMoviesReq) returns (AllUserAllLikedMoviesResp);
}

@server (
    group : likedMovie
    prefix : /api/v1
    jwt : Auth
)
service MovieService {
    @doc "Create user liked movie or Update is exist"
    @handler LikedMovie
    post /liked/movie(LikedMovieReq) returns (LikedMovieResp);
//
    @doc "remove user liked movie - update state "
    @handler RemoveLikedMovie
    patch /liked/movie(RemoveLikedMovieReq) returns (RemoveLikedMovieResp);

    @doc "Find Liked Movie"
    @handler IsLikedMovie
    get /liked/movie/:movie_id(IsLikedMovieReq) returns (IsLikedMovieResp);
}