syntax = "v1"

info(
    title: "follow or unfollow user API"
    desc: "follow or unfollow user API"
    author: "Jackson.tmm"
    email: "ryantokmanmokmtm"
    version: "demo"
)
//
//type (
//    CreateNewFriendReq {
//        FriendId uint `json:"friend_id"`
//    }
//    CreateNewFriendResp {}
//
//    RemoveFriendReq {
//        FriendId uint `json:"friend_id"`
//    }
//    RemoveFriendResp {}
//
//    GetOneFriendReq {
//        FriendId uint `path:"friend_id"`
//    }
//    GetOneFriendResp {
//        IsFriend bool `json:"is_friend"`
//    }
//
//    //NEW-------------------------------
//    AcceptFriendNotificationReq struct{
//        RequestID uint `json:"request_id"`
//    }
//    AcceptFriendNotificationResp struct{
//        Message string  `json:"message"`
//    }
//
//    DeclineFriendNotificationReq struct{
//        RequestID uint `json:"request_id"`
//    }
//    DeclineFriendNotificationResp struct{
//        Message string  `json:"message"`
//    }
//
//    CancelFriendNotificationReq struct{
//        RequestID uint `json:"request_id"`
//    }
//    CancelFriendNotificationResp struct{
//        Message string  `json:"message"`
//    }
//
//    GetFriendRequestReq struct {}
//    GetFriendRequestResp struct {
//        Requests []FriendRequest `json:"requests"`
//    }
//)
//
//type FriendRequest struct {
//    RequestID uint `json:"request_id"`
//    Sender UserInfo `json:"sender"`
//    SentTime int64 `json:"send_time"`
//}
//
//
//@server (
//    group : friend
//    prefix : /api/v1
//    jwt : Auth
//)
//service MovieService {
//    @doc (
//        summary : "Add New Friend to user following list"
//    )
//    @handler CreateNewFriend
//    post /friend(CreateNewFriendReq) returns (CreateNewFriendResp);
//
//    @doc (
//        summary : "Remote a followed friend from following list"
//    )
//    @handler RemoveFriend
//    patch /friend(RemoveFriendReq) returns (RemoveFriendResp);
//
//    @doc (
//        summary : "get user is followed by user"
//    )
//    @handler GetOneFriend
//    get /friend/:friend_id(GetOneFriendReq) returns (GetOneFriendResp);
//
//    @handler AcceptFriendRequest
//    post /friend/request/accept(AcceptFriendNotificationReq) returns (AcceptFriendNotificationResp);
//
//    @handler CancelFriendRequest
//    patch /friend/request/cancel(CancelFriendNotificationReq) returns (CancelFriendNotificationResp);
//
//    @handler DeclineFriendRequest
//    patch /friend/request/decline(DeclineFriendNotificationReq) returns (DeclineFriendNotificationResp);
//
//    @handler GetFriendRequest
//    get /friend/requests(GetFriendRequestReq) returns (GetFriendRequestResp);
//
//}


type (
    AddFriendReq {
        UserID uint `json:"user_id"`
    }
    AddFriendResp {
//        Message string  `json:"message"`
        SenderID uint `json:"sender"`
        RequestID uint `json:"request_id"`
    }

    RemoveFriendReq  {
        FriendID uint `json:"user_id"`
    }
    RemoveFriendResp  {}

    AcceptFriendNotificationReq {
        RequestID uint `json:"request_id"`
    }
    AcceptFriendNotificationResp {
        Message string  `json:"message"`
    }

    DeclineFriendNotificationReq {
        RequestID uint `json:"request_id"`
    }
    DeclineFriendNotificationResp {
        Message string  `json:"message"`
    }

    CancelFriendNotificationReq {
        RequestID uint `json:"request_id"`
    }
    CancelFriendNotificationResp {
        Message string  `json:"message"`
    }

    GetFriendRequestReq  {
        Page uint `form:"page,default=1"`
        Limit uint `form:"limit,default=20"`
    }
    GetFriendRequestResp  {
        Requests []FriendRequest `json:"requests"`
        MetaData MetaData `json:"metadata"`
    }

    IsFriendReq {
        UserID uint `path:"user_id"`
    }
    IsFriendResp {
        IsFriend bool `json:"is_friend"`
        IsSentRequest bool `json:"is_sent_request"`
        RequestInfo BasicRequestInfo `json:"request"`
    }

//    GetFriendListReq {}
//    GetFriendListResp {
//        Friends []FriendInfo `json:"friends"`
//    }
)

//type FriendInfo {
//    RoomID uint `json:"id"`
//    Info UserInfo `json:"friend_info"`
//}

type BasicRequestInfo {
    RequestID uint `json:"request_id"`
    SenderID uint `json:"sender_id"`
}

type FriendRequest  {
    RequestID uint `json:"request_id"`
    Sender UserInfo `json:"sender"`
    SentTime int64 `json:"send_time"`
    State uint `json:"state"`
}

@server (
    group : friend
    jwt : Auth
    prefix: /api/v1
)
service MovieService {
    @handler AddFriend
    post /friend(AddFriendReq) returns (AddFriendResp);

    @handler GetFriendRequest
    get /friend/requests(GetFriendRequestReq) returns (GetFriendRequestResp);


    @handler RemoveFriend
    delete /friend(RemoveFriendReq) returns (RemoveFriendResp);

    @handler AcceptFriendRequest
    post /friend/request/accept(AcceptFriendNotificationReq) returns (AcceptFriendNotificationResp);

    @handler CancelFriendRequest
    patch /friend/request/cancel(CancelFriendNotificationReq) returns (CancelFriendNotificationResp);

    @handler DeclineFriendRequest
    patch /friend/request/decline(DeclineFriendNotificationReq) returns (DeclineFriendNotificationResp);

    @handler IsFriend
    get /friend/:user_id(IsFriendReq) returns (IsFriendResp);

//    @handler GetFriendList
//    get /friends(GetFriendList) returns (GetFriendListResp)
}
