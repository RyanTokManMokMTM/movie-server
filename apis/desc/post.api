syntax = "v1"

info(
    title: "post api"
    desc: "post api"
    author: "Jackson.tmm"
    email: "ryantokmanmokmtm"
    version: "demo"
)


type (
    CreatePostReq {
        PostTitle string `json:"post_title"`
        PostDesc string `json:"post_desc"`
        MovieID uint `json:"movie_id"`
    }
    CreatePostResp {
        PostID uint `json:"id"`
        CreateTime int64 `json:"create_time"`
    }

    UpdatePostReq {
        PostID uint `json:"post_id"`
        PostTitle string `json:"post_title"`
        PostDesc string `json:"post_desc"`
    }
    UpdatePostResp {}

    DeletePostReq {
        PostID uint `json:"post_id"`
    }
    DeletePostResp {}

    //For all user
    AllPostsInfoReq {
        //do we need the last post id that the latest post client have
        Page uint `form:"page,default=1"`
        Limit uint `form:"limit,default=5"` //get 5 post per time...
    }
    AllPostsInfoResp {
        Infos []PostInfo `json:"post_info"`
        MetaData MetaData `json:"meta_data"`
    }

    FollowPostsInfoReq {
        Page uint `form:"page,default=1"`
        Limit uint `form:"limit,default=20"`
    }
    FollowPostsInfoResp {
        Infos []PostInfo `json:"post_info"`
        MetaData MetaData `json:"meta_data"`
    }

    //Get one post info
    PostInfoByIdReq {
        PostID uint `path:"post_id"`
    }
    PostInfoByIdResp {
        Info PostInfo `json:"post_info"`
    }

    //get all post of the user
    PostsInfoReq {
        UserID uint `path:"user_id"`
        Page uint `form:"page,default=1"`
        Limit uint `form:"limit,default=20"`
    }
    PostsInfoResp {
        Infos []PostInfo `json:"post_info"`
        MetaData MetaData `json:"metadata"`
    }
//
    CountPostLikedReq {
        PostID uint `json:"post_id"`
    }
    CountPostLikedResp {
        Count uint `json:"total_liked"`
    }

    CountUserPostsReq {
        UserId uint `path:"user_id"`
    }
    CountUserPostsResp {
        Count uint `json:"total_posts"`
    }
)

type (
    PostInfo {
        PostID uint `json:"id"`
        PostUser PostUserInfo `json:"user_info"`
        PostTitle string `json:"post_title"`
        PostDesc string `json:"post_desc"`
        PostMovie PostMovieInfo `json:"post_movie_info"`
        PostLikeCount int64 `json:"post_like_count"`
        PostCommentCount int64 `json:"post_comment_count"`
        IsPostLikedByUser bool `json:"is_post_liked"`
        CreateAt int64 `json:"create_at"`
    }

    PostMovieInfo {
        MovieID          uint   `json:"id"`
        PosterPath       string  `json:"poster_path"`
        Title            string  `json:"title"`
    }

    PostUserInfo {
        UserID uint `json:"id"`
        UserName string `json:"name"`
        UserAvatar string `json:"avatar"`
    }
)


@server(
    group : posts
    jwt : Auth
    prefix : api/v1
)
service MovieService {
    @doc (
        summary :"Create Post"
    )
    @handler CreatePost
    post /posts(CreatePostReq) returns (CreatePostResp);

    @doc (
        summary : "Update Post"
    )
    @handler UpdatePost
    patch /posts(UpdatePostReq) returns (UpdatePostResp);

    @doc (
        summary : "delete post"
    )
    @handler DeletePost
    delete /posts(DeletePostReq) returns (DeletePostResp);

    //need to identify who we are -> filter
    @doc (
        summary : "Get all Post(without self)"
    )
    @handler GetAllPost
    get /posts/all(AllPostsInfoReq) returns (AllPostsInfoResp);

    //need to identify who we are -> filter
    @doc (
        summary : "Get all following Post(within self)"
    )
    @handler GetFollowingPost
    get /posts/follow(FollowPostsInfoReq) returns (FollowPostsInfoResp);

}

@server(
    group : posts
    prefix : api/v1
    jwt : Auth
)
service MovieService {

    @doc (
        summary : "Get PostInfo by PostID with user liked post"
    )
    @handler GetPostByPostID
    get /post/:post_id(PostInfoByIdReq) returns (PostInfoByIdResp);

    @doc (
        summary : "get all user(userID) post with user liked post"
    )
    @handler GetUserPosts
    get /posts/:user_id(PostsInfoReq) returns (PostsInfoResp);
}

@server(
    group : posts
    prefix : api/v1
)
service MovieService {
    @doc (
        summary : "Count all user post"
    )
    @handler CountAllUserPost
    get /posts/count/:user_id(CountUserPostsReq) returns (CountUserPostsResp);
}