// Code generated by goctl. DO NOT EDIT!

package movie

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/zeromicro/go-zero/core/logx"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	movieInfosFieldNames          = builder.RawFieldNames(&MovieInfos{})
	movieInfosRows                = strings.Join(movieInfosFieldNames, ",")
	movieInfosRowsExpectAutoSet   = strings.Join(stringx.Remove(movieInfosFieldNames, "`movie_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	movieInfosRowsWithPlaceHolder = strings.Join(stringx.Remove(movieInfosFieldNames, "`movie_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheMovieMovieInfosMovieIdPrefix = "cache:movie:movieInfos:movieId:"
)

type (
	movieInfosModel interface {
		Insert(ctx context.Context, data *MovieInfos) (sql.Result, error)
		FindOne(ctx context.Context, movieId int64) (*MovieInfos, error)
		Update(ctx context.Context, newData *MovieInfos) error
		Delete(ctx context.Context, movieId int64) error
		MoviePageListsByGenreID(ctx context.Context, genreID int64, pageSize int64) ([]*MovieInfos, error)
	}

	defaultMovieInfosModel struct {
		sqlc.CachedConn
		table string
	}

	MovieInfos struct {
		Adult            int64   `db:"adult"`
		BackdropPath     string  `db:"backdrop_path"`
		MovieId          int64   `db:"movie_id"`
		OriginalLanguage string  `db:"original_language"`
		OriginalTitle    string  `db:"original_title"`
		Overview         string  `db:"overview"`
		Popularity       float64 `db:"popularity"`
		PosterPath       string  `db:"poster_path"`
		ReleaseDate      string  `db:"release_date"`
		Title            string  `db:"title"`
		RunTime          int64   `db:"run_time"`
		Video            int64   `db:"video"`
		VoteAverage      float64 `db:"vote_average"`
		VoteCount        int64   `db:"vote_count"`
	}
)

func newMovieInfosModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultMovieInfosModel {
	return &defaultMovieInfosModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`movie_infos`",
	}
}

func (m *defaultMovieInfosModel) Delete(ctx context.Context, movieId int64) error {
	movieMovieInfosMovieIdKey := fmt.Sprintf("%s%v", cacheMovieMovieInfosMovieIdPrefix, movieId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `movie_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, movieId)
	}, movieMovieInfosMovieIdKey)
	return err
}

func (m *defaultMovieInfosModel) FindOne(ctx context.Context, movieId int64) (*MovieInfos, error) {
	movieMovieInfosMovieIdKey := fmt.Sprintf("%s%v", cacheMovieMovieInfosMovieIdPrefix, movieId)
	var resp MovieInfos
	err := m.QueryRowCtx(ctx, &resp, movieMovieInfosMovieIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `movie_id` = ? limit 1", movieInfosRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, movieId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMovieInfosModel) Insert(ctx context.Context, data *MovieInfos) (sql.Result, error) {
	movieMovieInfosMovieIdKey := fmt.Sprintf("%s%v", cacheMovieMovieInfosMovieIdPrefix, data.MovieId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, movieInfosRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Adult, data.BackdropPath, data.OriginalLanguage, data.OriginalTitle, data.Overview, data.Popularity, data.PosterPath, data.ReleaseDate, data.Title, data.RunTime, data.Video, data.VoteAverage, data.VoteCount)
	}, movieMovieInfosMovieIdKey)
	return ret, err
}

func (m *defaultMovieInfosModel) Update(ctx context.Context, data *MovieInfos) error {
	movieMovieInfosMovieIdKey := fmt.Sprintf("%s%v", cacheMovieMovieInfosMovieIdPrefix, data.MovieId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `movie_id` = ?", m.table, movieInfosRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Adult, data.BackdropPath, data.OriginalLanguage, data.OriginalTitle, data.Overview, data.Popularity, data.PosterPath, data.ReleaseDate, data.Title, data.RunTime, data.Video, data.VoteAverage, data.VoteCount, data.MovieId)
	}, movieMovieInfosMovieIdKey)
	return err
}

// MoviePageListsByGenreID GET MOVIES LIST BY GENRE ID
func (m *defaultMovieInfosModel) MoviePageListsByGenreID(ctx context.Context, genreID int64, pageSize int64) ([]*MovieInfos, error) {
	sqlQuery := fmt.Sprintf("SELECT %s FROM `genres_movies` "+
		"INNER JOIN `movie_infos` ON `genres_movies`.`movie_info_movie_id` = `movie_infos`.`movie_id` "+
		"INNER JOIN `genre_infos` ON `genres_movies`.`genre_info_genre_id` = `genre_infos`.`genre_id` "+
		"WHERE genres_movies.genre_info_genre_id = ? LIMIT %d", movieInfosRows, pageSize)

	logx.Infof("List Movies By Genre ID - SQL %s\n", sqlQuery)
	var resp []*MovieInfos
	err := m.QueryRowsNoCacheCtx(ctx, &resp, sqlQuery, genreID)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultMovieInfosModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheMovieMovieInfosMovieIdPrefix, primary)
}

func (m *defaultMovieInfosModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `movie_id` = ? limit 1", movieInfosRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultMovieInfosModel) tableName() string {
	return m.table
}
