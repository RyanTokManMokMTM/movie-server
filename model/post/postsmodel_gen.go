// Code generated by goctl. DO NOT EDIT!

package post

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	postsFieldNames          = builder.RawFieldNames(&Posts{})
	postsRows                = strings.Join(postsFieldNames, ",")
	postsRowsExpectAutoSet   = strings.Join(stringx.Remove(postsFieldNames, "`post_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	postsRowsWithPlaceHolder = strings.Join(stringx.Remove(postsFieldNames, "`post_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	postsFieldNamesPostsWithInfo          = builder.RawFieldNames(&PostsWithInfo{})
	postsRowsPostsWithInfo                = strings.Join(postsFieldNamesPostsWithInfo, ",")
	postsRowsExpectAutoSetPostsWithInfo   = strings.Join(stringx.Remove(postsFieldNamesPostsWithInfo, "`post_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	postsRowsWithPlaceHolderPostsWithInfo = strings.Join(stringx.Remove(postsFieldNamesPostsWithInfo, "`post_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheMoviePostsPostIdPrefix = "cache:movie:posts:postId:"
)

type (
	postsModel interface {
		Insert(ctx context.Context, data *Posts) (sql.Result, error)
		FindOne(ctx context.Context, postId int64) (*Posts, error)
		Update(ctx context.Context, newData *Posts) error
		Delete(ctx context.Context, postId int64) error

		FindAllWithInfoByCreateTime(ctx context.Context) ([]*PostsWithInfo, error)
		FindUserWithInfoByCreateTime(ctx context.Context, userID int64) ([]*PostsWithInfo, error)
	}

	defaultPostsModel struct {
		sqlc.CachedConn
		table string
	}

	Posts struct {
		PostId     int64     `db:"post_id"`    // post id
		PostTitle  string    `db:"post_title"` // post title
		PostDesc   string    `db:"post_desc"`  // post desc
		UserId     int64     `db:"user_id"`    // who posted the post
		MovieId    int64     `db:"movie_id"`   // relevant movie info
		PostLike   int64     `db:"post_like"`  // post like
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}

	PostsWithInfo struct {
		PostId     int64     `db:"post_id"`    // post id
		PostTitle  string    `db:"post_title"` // post title
		PostDesc   string    `db:"post_desc"`  // post desc
		UserId     int64     `db:"user_id"`    // who posted the post
		MovieId    int64     `db:"movie_id"`   // relevant movie info
		PostLike   int64     `db:"post_like"`  // post like
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		//Extra fields
		CommentCount int64  `db:"comment_count"`
		UserName     string `db:"name"`
		UserAvatar   string `db:"avatar"`
		MovieID      int64  `db:"movie_id"`
		MovieTitle   string `db:"title"`
		MoviePoster  string `db:"poster_path"`
	}
)

func newPostsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultPostsModel {
	return &defaultPostsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`posts`",
	}
}

func (m *defaultPostsModel) Delete(ctx context.Context, postId int64) error {
	moviePostsPostIdKey := fmt.Sprintf("%s%v", cacheMoviePostsPostIdPrefix, postId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `post_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, postId)
	}, moviePostsPostIdKey)
	return err
}

func (m *defaultPostsModel) FindOne(ctx context.Context, postId int64) (*Posts, error) {
	moviePostsPostIdKey := fmt.Sprintf("%s%v", cacheMoviePostsPostIdPrefix, postId)
	var resp Posts
	err := m.QueryRowCtx(ctx, &resp, moviePostsPostIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `post_id` = ? limit 1", postsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, postId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPostsModel) Insert(ctx context.Context, data *Posts) (sql.Result, error) {
	moviePostsPostIdKey := fmt.Sprintf("%s%v", cacheMoviePostsPostIdPrefix, data.PostId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, postsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.PostTitle, data.PostDesc, data.UserId, data.MovieId, data.PostLike)
	}, moviePostsPostIdKey)
	return ret, err
}

func (m *defaultPostsModel) Update(ctx context.Context, data *Posts) error {
	moviePostsPostIdKey := fmt.Sprintf("%s%v", cacheMoviePostsPostIdPrefix, data.PostId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `post_id` = ?", m.table, postsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.PostTitle, data.PostDesc, data.UserId, data.MovieId, data.PostLike, data.PostId)
	}, moviePostsPostIdKey)
	return err
}

func (m *defaultPostsModel) FindAllWithInfoByCreateTime(ctx context.Context) ([]*PostsWithInfo, error) {
	query := fmt.Sprintf("SELECT `posts`.*,movie_infos.title,movie_infos.poster_path,users.avatar,users.name ,COUNT(comments.comment_id) as coumment_cout FROM posts  " +
		"LEFT JOIN comments ON comments.post_id = posts.post_id " +
		"INNER JOIN movie_infos ON `posts`.movie_id = movie_infos.movie_id " +
		"INNER JOIN users ON users.id = `posts`.user_id  GROUP BY `posts`.post_id ORDER BY `posts`.create_time DESC")
	var resp []*PostsWithInfo
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query)
	switch err {
	case nil:
		return resp, err
	default:
		return nil, err
	}
}

func (m *defaultPostsModel) FindUserWithInfoByCreateTime(ctx context.Context, userID int64) ([]*PostsWithInfo, error) {
	query := fmt.Sprintf("SELECT `posts`.*,movie_infos.title,movie_infos.poster_path,users.avatar,users.name ,COUNT(comments.comment_id) as coumment_cout FROM posts  " +
		"LEFT JOIN comments ON comments.post_id = posts.post_id " +
		"INNER JOIN movie_infos ON `posts`.movie_id = movie_infos.movie_id " +
		"INNER JOIN users ON users.id = `posts`.user_id  WHERE posts.user_id = ? GROUP BY `posts`.post_id ORDER BY `posts`.create_time DESC")
	var resp []*PostsWithInfo
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, userID)
	switch err {
	case nil:
		return resp, err
	default:
		return nil, err
	}
}

func (m *defaultPostsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheMoviePostsPostIdPrefix, primary)
}

func (m *defaultPostsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `post_id` = ? limit 1", postsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPostsModel) tableName() string {
	return m.table
}
