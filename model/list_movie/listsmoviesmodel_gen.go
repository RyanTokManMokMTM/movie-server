// Code generated by goctl. DO NOT EDIT!

package list_movie

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	listsMoviesFieldNames          = builder.RawFieldNames(&ListsMovies{})
	listsMoviesRows                = strings.Join(listsMoviesFieldNames, ",")
	listsMoviesRowsExpectAutoSet   = strings.Join(stringx.Remove(listsMoviesFieldNames, "`lists_movie_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	listsMoviesRowsWithPlaceHolder = strings.Join(stringx.Remove(listsMoviesFieldNames, "`lists_movie_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheMovieListsMoviesListsMovieIdPrefix = "cache:movie:listsMovies:listsMovieId:"
)

type (
	listsMoviesModel interface {
		Insert(ctx context.Context, data *ListsMovies) (sql.Result, error)
		FindOne(ctx context.Context, listsMovieId int64) (*ListsMovies, error)
		Update(ctx context.Context, newData *ListsMovies) error
		Delete(ctx context.Context, listsMovieId int64) error
	}

	defaultListsMoviesModel struct {
		sqlc.CachedConn
		table string
	}

	ListsMovies struct {
		ListsMovieId    int64     `db:"lists_movie_id"`
		ListId          int64     `db:"list_id"`
		MovieId         int64     `db:"movie_id"`
		MoviePosterPath string    `db:"movie_poster_path"`
		UserFeeling     string    `db:"user_feeling"`
		UserRatetext    string    `db:"user_ratetext"`
		CreateTime      time.Time `db:"create_time"`
		UpdateTime      time.Time `db:"update_time"`
	}
)

func newListsMoviesModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultListsMoviesModel {
	return &defaultListsMoviesModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`lists_movies`",
	}
}

func (m *defaultListsMoviesModel) Delete(ctx context.Context, listsMovieId int64) error {
	movieListsMoviesListsMovieIdKey := fmt.Sprintf("%s%v", cacheMovieListsMoviesListsMovieIdPrefix, listsMovieId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `lists_movie_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, listsMovieId)
	}, movieListsMoviesListsMovieIdKey)
	return err
}

func (m *defaultListsMoviesModel) FindOne(ctx context.Context, listsMovieId int64) (*ListsMovies, error) {
	movieListsMoviesListsMovieIdKey := fmt.Sprintf("%s%v", cacheMovieListsMoviesListsMovieIdPrefix, listsMovieId)
	var resp ListsMovies
	err := m.QueryRowCtx(ctx, &resp, movieListsMoviesListsMovieIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `lists_movie_id` = ? limit 1", listsMoviesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, listsMovieId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultListsMoviesModel) Insert(ctx context.Context, data *ListsMovies) (sql.Result, error) {
	movieListsMoviesListsMovieIdKey := fmt.Sprintf("%s%v", cacheMovieListsMoviesListsMovieIdPrefix, data.ListsMovieId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, listsMoviesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ListId, data.MovieId, data.MoviePosterPath, data.UserFeeling, data.UserRatetext)
	}, movieListsMoviesListsMovieIdKey)
	return ret, err
}

func (m *defaultListsMoviesModel) Update(ctx context.Context, data *ListsMovies) error {
	movieListsMoviesListsMovieIdKey := fmt.Sprintf("%s%v", cacheMovieListsMoviesListsMovieIdPrefix, data.ListsMovieId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `lists_movie_id` = ?", m.table, listsMoviesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ListId, data.MovieId, data.MoviePosterPath, data.UserFeeling, data.UserRatetext, data.ListsMovieId)
	}, movieListsMoviesListsMovieIdKey)
	return err
}

func (m *defaultListsMoviesModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheMovieListsMoviesListsMovieIdPrefix, primary)
}

func (m *defaultListsMoviesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `lists_movie_id` = ? limit 1", listsMoviesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultListsMoviesModel) tableName() string {
	return m.table
}
