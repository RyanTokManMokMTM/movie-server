// Code generated by goctl. DO NOT EDIT!

package genre

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/zeromicro/go-zero/core/logx"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	genreInfosFieldNames          = builder.RawFieldNames(&GenreInfos{})
	genreInfosRows                = strings.Join(genreInfosFieldNames, ",")
	genreInfosRowsExpectAutoSet   = strings.Join(stringx.Remove(genreInfosFieldNames, "`genre_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	genreInfosRowsWithPlaceHolder = strings.Join(stringx.Remove(genreInfosFieldNames, "`genre_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheMovieGenreInfosGenreIdPrefix = "cache:movie:genreInfos:genreId:"
)

type (
	genreInfosModel interface {
		Insert(ctx context.Context, data *GenreInfos) (sql.Result, error)
		FindOne(ctx context.Context, genreId int64) (*GenreInfos, error)
		Update(ctx context.Context, newData *GenreInfos) error
		Delete(ctx context.Context, genreId int64) error

		FindMovieGenresByMovieID(ctx context.Context, movieID int64) ([]*GenreInfos, error)
	}

	defaultGenreInfosModel struct {
		sqlc.CachedConn
		table string
	}

	GenreInfos struct {
		GenreId   int64        `db:"genre_id"`
		Name      string       `db:"name"`
		CreatedAt time.Time    `db:"created_at"`
		UpdatedAt sql.NullTime `db:"updated_at"`
		DeletedAt sql.NullTime `db:"deleted_at"`
	}
)

func newGenreInfosModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultGenreInfosModel {
	return &defaultGenreInfosModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`genre_infos`",
	}
}

func (m *defaultGenreInfosModel) Delete(ctx context.Context, genreId int64) error {
	movieGenreInfosGenreIdKey := fmt.Sprintf("%s%v", cacheMovieGenreInfosGenreIdPrefix, genreId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `genre_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, genreId)
	}, movieGenreInfosGenreIdKey)
	return err
}

func (m *defaultGenreInfosModel) FindOne(ctx context.Context, genreId int64) (*GenreInfos, error) {
	movieGenreInfosGenreIdKey := fmt.Sprintf("%s%v", cacheMovieGenreInfosGenreIdPrefix, genreId)
	var resp GenreInfos
	err := m.QueryRowCtx(ctx, &resp, movieGenreInfosGenreIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `genre_id` = ? limit 1", genreInfosRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, genreId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGenreInfosModel) Insert(ctx context.Context, data *GenreInfos) (sql.Result, error) {
	movieGenreInfosGenreIdKey := fmt.Sprintf("%s%v", cacheMovieGenreInfosGenreIdPrefix, data.GenreId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, genreInfosRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.CreatedAt, data.UpdatedAt, data.DeletedAt)
	}, movieGenreInfosGenreIdKey)
	return ret, err
}

func (m *defaultGenreInfosModel) Update(ctx context.Context, data *GenreInfos) error {
	movieGenreInfosGenreIdKey := fmt.Sprintf("%s%v", cacheMovieGenreInfosGenreIdPrefix, data.GenreId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `genre_id` = ?", m.table, genreInfosRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.CreatedAt, data.UpdatedAt, data.DeletedAt, data.GenreId)
	}, movieGenreInfosGenreIdKey)
	return err
}

func (m *defaultGenreInfosModel) FindMovieGenresByMovieID(ctx context.Context, movieID int64) ([]*GenreInfos, error) {
	query := fmt.Sprintf("SELECT %s FROM `genres_movies` "+
		"INNER JOIN `movie_infos` ON `genres_movies`.`movie_info_movie_id` = `movie_infos`.`movie_id`"+
		"INNER JOIN `genre_infos` ON `genres_movies`.`genre_info_genre_id` = `genre_infos`.`genre_id` "+
		"WHERE genres_movies.movie_info_movie_id = ?;", genreInfosRows)

	logx.Infof("Movie Genre Query : %s", query)
	var resp []*GenreInfos
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, movieID)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultGenreInfosModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheMovieGenreInfosGenreIdPrefix, primary)
}

func (m *defaultGenreInfosModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `genre_id` = ? limit 1", genreInfosRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultGenreInfosModel) tableName() string {
	return m.table
}
