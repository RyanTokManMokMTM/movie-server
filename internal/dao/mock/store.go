// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ryantokmanmokmtm/movie-server/internal/dao (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ryantokmanmokmtm/movie-server/internal/models"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AcceptFriendNotification mocks base method.
func (m *MockStore) AcceptFriendNotification(arg0 context.Context, arg1 *models.FriendNotification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptFriendNotification", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptFriendNotification indicates an expected call of AcceptFriendNotification.
func (mr *MockStoreMockRecorder) AcceptFriendNotification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptFriendNotification", reflect.TypeOf((*MockStore)(nil).AcceptFriendNotification), arg0, arg1)
}

// CancelFriendNotification mocks base method.
func (m *MockStore) CancelFriendNotification(arg0 context.Context, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelFriendNotification", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelFriendNotification indicates an expected call of CancelFriendNotification.
func (mr *MockStoreMockRecorder) CancelFriendNotification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelFriendNotification", reflect.TypeOf((*MockStore)(nil).CancelFriendNotification), arg0, arg1)
}

// CountCollectedMovie mocks base method.
func (m *MockStore) CountCollectedMovie(arg0 context.Context, arg1 uint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountCollectedMovie", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountCollectedMovie indicates an expected call of CountCollectedMovie.
func (mr *MockStoreMockRecorder) CountCollectedMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountCollectedMovie", reflect.TypeOf((*MockStore)(nil).CountCollectedMovie), arg0, arg1)
}

// CountCommentLikes mocks base method.
func (m *MockStore) CountCommentLikes(arg0 context.Context, arg1 uint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountCommentLikes", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountCommentLikes indicates an expected call of CountCommentLikes.
func (mr *MockStoreMockRecorder) CountCommentLikes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountCommentLikes", reflect.TypeOf((*MockStore)(nil).CountCommentLikes), arg0, arg1)
}

// CountFriends mocks base method.
func (m *MockStore) CountFriends(arg0 context.Context, arg1 uint) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountFriends", arg0, arg1)
	ret0, _ := ret[0].(int64)
	return ret0
}

// CountFriends indicates an expected call of CountFriends.
func (mr *MockStoreMockRecorder) CountFriends(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountFriends", reflect.TypeOf((*MockStore)(nil).CountFriends), arg0, arg1)
}

// CountLikedMovie mocks base method.
func (m *MockStore) CountLikedMovie(arg0 context.Context, arg1 uint) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountLikedMovie", arg0, arg1)
	ret0, _ := ret[0].(int64)
	return ret0
}

// CountLikedMovie indicates an expected call of CountLikedMovie.
func (mr *MockStoreMockRecorder) CountLikedMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountLikedMovie", reflect.TypeOf((*MockStore)(nil).CountLikedMovie), arg0, arg1)
}

// CountLikesOfMovie mocks base method.
func (m *MockStore) CountLikesOfMovie(arg0 context.Context, arg1 uint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountLikesOfMovie", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountLikesOfMovie indicates an expected call of CountLikesOfMovie.
func (mr *MockStoreMockRecorder) CountLikesOfMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountLikesOfMovie", reflect.TypeOf((*MockStore)(nil).CountLikesOfMovie), arg0, arg1)
}

// CountListMovies mocks base method.
func (m *MockStore) CountListMovies(arg0 context.Context, arg1 uint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountListMovies", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountListMovies indicates an expected call of CountListMovies.
func (mr *MockStoreMockRecorder) CountListMovies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountListMovies", reflect.TypeOf((*MockStore)(nil).CountListMovies), arg0, arg1)
}

// CountMessage mocks base method.
func (m *MockStore) CountMessage(arg0 context.Context, arg1 uint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountMessage", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountMessage indicates an expected call of CountMessage.
func (mr *MockStoreMockRecorder) CountMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountMessage", reflect.TypeOf((*MockStore)(nil).CountMessage), arg0, arg1)
}

// CountMovieCollected mocks base method.
func (m *MockStore) CountMovieCollected(arg0 context.Context, arg1 uint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountMovieCollected", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountMovieCollected indicates an expected call of CountMovieCollected.
func (mr *MockStoreMockRecorder) CountMovieCollected(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountMovieCollected", reflect.TypeOf((*MockStore)(nil).CountMovieCollected), arg0, arg1)
}

// CountPostLikes mocks base method.
func (m *MockStore) CountPostLikes(arg0 context.Context, arg1 uint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPostLikes", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPostLikes indicates an expected call of CountPostLikes.
func (mr *MockStoreMockRecorder) CountPostLikes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPostLikes", reflect.TypeOf((*MockStore)(nil).CountPostLikes), arg0, arg1)
}

// CountUserPosts mocks base method.
func (m *MockStore) CountUserPosts(arg0 context.Context, arg1 uint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUserPosts", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUserPosts indicates an expected call of CountUserPosts.
func (mr *MockStoreMockRecorder) CountUserPosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUserPosts", reflect.TypeOf((*MockStore)(nil).CountUserPosts), arg0, arg1)
}

// CreateLikedMovie mocks base method.
func (m *MockStore) CreateLikedMovie(arg0 context.Context, arg1, arg2 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLikedMovie", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLikedMovie indicates an expected call of CreateLikedMovie.
func (mr *MockStoreMockRecorder) CreateLikedMovie(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLikedMovie", reflect.TypeOf((*MockStore)(nil).CreateLikedMovie), arg0, arg1, arg2)
}

// CreateNewList mocks base method.
func (m *MockStore) CreateNewList(arg0 context.Context, arg1, arg2 string, arg3 uint) (*models.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewList", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewList indicates an expected call of CreateNewList.
func (mr *MockStoreMockRecorder) CreateNewList(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewList", reflect.TypeOf((*MockStore)(nil).CreateNewList), arg0, arg1, arg2, arg3)
}

// CreateNewPost mocks base method.
func (m *MockStore) CreateNewPost(arg0 context.Context, arg1 *models.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewPost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewPost indicates an expected call of CreateNewPost.
func (mr *MockStoreMockRecorder) CreateNewPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewPost", reflect.TypeOf((*MockStore)(nil).CreateNewPost), arg0, arg1)
}

// CreatePostComment mocks base method.
func (m *MockStore) CreatePostComment(arg0 context.Context, arg1, arg2 uint, arg3 string) (*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostComment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePostComment indicates an expected call of CreatePostComment.
func (mr *MockStoreMockRecorder) CreatePostComment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostComment", reflect.TypeOf((*MockStore)(nil).CreatePostComment), arg0, arg1, arg2, arg3)
}

// CreatePostLiked mocks base method.
func (m *MockStore) CreatePostLiked(arg0 context.Context, arg1 uint, arg2 *models.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostLiked", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePostLiked indicates an expected call of CreatePostLiked.
func (mr *MockStoreMockRecorder) CreatePostLiked(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostLiked", reflect.TypeOf((*MockStore)(nil).CreatePostLiked), arg0, arg1, arg2)
}

// CreatePostReplyComment mocks base method.
func (m *MockStore) CreatePostReplyComment(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 uint, arg6 string) (*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostReplyComment", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePostReplyComment indicates an expected call of CreatePostReplyComment.
func (mr *MockStoreMockRecorder) CreatePostReplyComment(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostReplyComment", reflect.TypeOf((*MockStore)(nil).CreatePostReplyComment), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeclineFriendNotification mocks base method.
func (m *MockStore) DeclineFriendNotification(arg0 context.Context, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclineFriendNotification", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeclineFriendNotification indicates an expected call of DeclineFriendNotification.
func (mr *MockStoreMockRecorder) DeclineFriendNotification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclineFriendNotification", reflect.TypeOf((*MockStore)(nil).DeclineFriendNotification), arg0, arg1)
}

// DeleteComment mocks base method.
func (m *MockStore) DeleteComment(arg0 context.Context, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockStoreMockRecorder) DeleteComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockStore)(nil).DeleteComment), arg0, arg1)
}

// DeleteList mocks base method.
func (m *MockStore) DeleteList(arg0 context.Context, arg1, arg2 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteList", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteList indicates an expected call of DeleteList.
func (mr *MockStoreMockRecorder) DeleteList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteList", reflect.TypeOf((*MockStore)(nil).DeleteList), arg0, arg1, arg2)
}

// DeletePost mocks base method.
func (m *MockStore) DeletePost(arg0 context.Context, arg1, arg2 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockStoreMockRecorder) DeletePost(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockStore)(nil).DeletePost), arg0, arg1, arg2)
}

// DeletePostLikes mocks base method.
func (m *MockStore) DeletePostLikes(arg0 context.Context, arg1 *models.PostLiked) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePostLikes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePostLikes indicates an expected call of DeletePostLikes.
func (mr *MockStoreMockRecorder) DeletePostLikes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostLikes", reflect.TypeOf((*MockStore)(nil).DeletePostLikes), arg0, arg1)
}

// ExistInTheRoom mocks base method.
func (m *MockStore) ExistInTheRoom(arg0 context.Context, arg1, arg2 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistInTheRoom", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExistInTheRoom indicates an expected call of ExistInTheRoom.
func (mr *MockStoreMockRecorder) ExistInTheRoom(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistInTheRoom", reflect.TypeOf((*MockStore)(nil).ExistInTheRoom), arg0, arg1, arg2)
}

// FindAllPosts mocks base method.
func (m *MockStore) FindAllPosts(arg0 context.Context, arg1 uint, arg2, arg3 int) ([]*models.Post, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllPosts", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllPosts indicates an expected call of FindAllPosts.
func (mr *MockStoreMockRecorder) FindAllPosts(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllPosts", reflect.TypeOf((*MockStore)(nil).FindAllPosts), arg0, arg1, arg2, arg3)
}

// FindFollowingPosts mocks base method.
func (m *MockStore) FindFollowingPosts(arg0 context.Context, arg1 uint, arg2, arg3 int) ([]*models.Post, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFollowingPosts", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindFollowingPosts indicates an expected call of FindFollowingPosts.
func (mr *MockStoreMockRecorder) FindFollowingPosts(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFollowingPosts", reflect.TypeOf((*MockStore)(nil).FindFollowingPosts), arg0, arg1, arg2, arg3)
}

// FindLikesNotificationByReceiver mocks base method.
func (m *MockStore) FindLikesNotificationByReceiver(arg0 context.Context, arg1 uint, arg2, arg3 int) ([]*models.LikeNotification, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLikesNotificationByReceiver", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*models.LikeNotification)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindLikesNotificationByReceiver indicates an expected call of FindLikesNotificationByReceiver.
func (mr *MockStoreMockRecorder) FindLikesNotificationByReceiver(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLikesNotificationByReceiver", reflect.TypeOf((*MockStore)(nil).FindLikesNotificationByReceiver), arg0, arg1, arg2, arg3)
}

// FindListMovies mocks base method.
func (m *MockStore) FindListMovies(arg0 context.Context, arg1, arg2 uint, arg3 int) ([]models.ListMovieInfoWithCreateTime, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListMovies", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]models.ListMovieInfoWithCreateTime)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindListMovies indicates an expected call of FindListMovies.
func (mr *MockStoreMockRecorder) FindListMovies(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListMovies", reflect.TypeOf((*MockStore)(nil).FindListMovies), arg0, arg1, arg2, arg3)
}

// FindMovieListByGenreID mocks base method.
func (m *MockStore) FindMovieListByGenreID(arg0 context.Context, arg1 uint) (*models.GenreInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMovieListByGenreID", arg0, arg1)
	ret0, _ := ret[0].(*models.GenreInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMovieListByGenreID indicates an expected call of FindMovieListByGenreID.
func (mr *MockStoreMockRecorder) FindMovieListByGenreID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMovieListByGenreID", reflect.TypeOf((*MockStore)(nil).FindMovieListByGenreID), arg0, arg1)
}

// FindOneByRoomID mocks base method.
func (m *MockStore) FindOneByRoomID(arg0 context.Context, arg1 uint) (*models.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByRoomID", arg0, arg1)
	ret0, _ := ret[0].(*models.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByRoomID indicates an expected call of FindOneByRoomID.
func (mr *MockStoreMockRecorder) FindOneByRoomID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByRoomID", reflect.TypeOf((*MockStore)(nil).FindOneByRoomID), arg0, arg1)
}

// FindOneByRoomIDWithInfo mocks base method.
func (m *MockStore) FindOneByRoomIDWithInfo(arg0 context.Context, arg1 uint) (*models.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByRoomIDWithInfo", arg0, arg1)
	ret0, _ := ret[0].(*models.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByRoomIDWithInfo indicates an expected call of FindOneByRoomIDWithInfo.
func (mr *MockStoreMockRecorder) FindOneByRoomIDWithInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByRoomIDWithInfo", reflect.TypeOf((*MockStore)(nil).FindOneByRoomIDWithInfo), arg0, arg1)
}

// FindOneComment mocks base method.
func (m *MockStore) FindOneComment(arg0 context.Context, arg1 uint) (*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneComment", arg0, arg1)
	ret0, _ := ret[0].(*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneComment indicates an expected call of FindOneComment.
func (mr *MockStoreMockRecorder) FindOneComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneComment", reflect.TypeOf((*MockStore)(nil).FindOneComment), arg0, arg1)
}

// FindOneCommentNotification mocks base method.
func (m *MockStore) FindOneCommentNotification(arg0 context.Context, arg1 uint, arg2, arg3 int) ([]*models.CommentNotification, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneCommentNotification", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*models.CommentNotification)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindOneCommentNotification indicates an expected call of FindOneCommentNotification.
func (mr *MockStoreMockRecorder) FindOneCommentNotification(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneCommentNotification", reflect.TypeOf((*MockStore)(nil).FindOneCommentNotification), arg0, arg1, arg2, arg3)
}

// FindOneFriend mocks base method.
func (m *MockStore) FindOneFriend(arg0 context.Context, arg1, arg2 uint) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneFriend", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneFriend indicates an expected call of FindOneFriend.
func (mr *MockStoreMockRecorder) FindOneFriend(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneFriend", reflect.TypeOf((*MockStore)(nil).FindOneFriend), arg0, arg1, arg2)
}

// FindOneFriendNotification mocks base method.
func (m *MockStore) FindOneFriendNotification(arg0 context.Context, arg1, arg2 uint) (*models.FriendNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneFriendNotification", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.FriendNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneFriendNotification indicates an expected call of FindOneFriendNotification.
func (mr *MockStoreMockRecorder) FindOneFriendNotification(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneFriendNotification", reflect.TypeOf((*MockStore)(nil).FindOneFriendNotification), arg0, arg1, arg2)
}

// FindOneFriendNotificationByID mocks base method.
func (m *MockStore) FindOneFriendNotificationByID(arg0 context.Context, arg1 uint) (*models.FriendNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneFriendNotificationByID", arg0, arg1)
	ret0, _ := ret[0].(*models.FriendNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneFriendNotificationByID indicates an expected call of FindOneFriendNotificationByID.
func (mr *MockStoreMockRecorder) FindOneFriendNotificationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneFriendNotificationByID", reflect.TypeOf((*MockStore)(nil).FindOneFriendNotificationByID), arg0, arg1)
}

// FindOneLikeCommentNotification mocks base method.
func (m *MockStore) FindOneLikeCommentNotification(arg0 context.Context, arg1, arg2, arg3 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneLikeCommentNotification", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindOneLikeCommentNotification indicates an expected call of FindOneLikeCommentNotification.
func (mr *MockStoreMockRecorder) FindOneLikeCommentNotification(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneLikeCommentNotification", reflect.TypeOf((*MockStore)(nil).FindOneLikeCommentNotification), arg0, arg1, arg2, arg3)
}

// FindOneLikePostNotification mocks base method.
func (m *MockStore) FindOneLikePostNotification(arg0 context.Context, arg1, arg2, arg3 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneLikePostNotification", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindOneLikePostNotification indicates an expected call of FindOneLikePostNotification.
func (mr *MockStoreMockRecorder) FindOneLikePostNotification(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneLikePostNotification", reflect.TypeOf((*MockStore)(nil).FindOneLikePostNotification), arg0, arg1, arg2, arg3)
}

// FindOneList mocks base method.
func (m *MockStore) FindOneList(arg0 context.Context, arg1 uint) (*models.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneList", arg0, arg1)
	ret0, _ := ret[0].(*models.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneList indicates an expected call of FindOneList.
func (mr *MockStoreMockRecorder) FindOneList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneList", reflect.TypeOf((*MockStore)(nil).FindOneList), arg0, arg1)
}

// FindOneMovie mocks base method.
func (m *MockStore) FindOneMovie(arg0 context.Context, arg1 uint) (*models.MovieInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneMovie", arg0, arg1)
	ret0, _ := ret[0].(*models.MovieInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneMovie indicates an expected call of FindOneMovie.
func (mr *MockStoreMockRecorder) FindOneMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneMovie", reflect.TypeOf((*MockStore)(nil).FindOneMovie), arg0, arg1)
}

// FindOneMovieDetail mocks base method.
func (m *MockStore) FindOneMovieDetail(arg0 context.Context, arg1 uint) (*models.MovieInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneMovieDetail", arg0, arg1)
	ret0, _ := ret[0].(*models.MovieInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneMovieDetail indicates an expected call of FindOneMovieDetail.
func (mr *MockStoreMockRecorder) FindOneMovieDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneMovieDetail", reflect.TypeOf((*MockStore)(nil).FindOneMovieDetail), arg0, arg1)
}

// FindOneMovieFormAnyList mocks base method.
func (m *MockStore) FindOneMovieFormAnyList(arg0 context.Context, arg1, arg2 uint) (*models.ListMovie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneMovieFormAnyList", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.ListMovie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneMovieFormAnyList indicates an expected call of FindOneMovieFormAnyList.
func (mr *MockStoreMockRecorder) FindOneMovieFormAnyList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneMovieFormAnyList", reflect.TypeOf((*MockStore)(nil).FindOneMovieFormAnyList), arg0, arg1, arg2)
}

// FindOneMovieFromList mocks base method.
func (m *MockStore) FindOneMovieFromList(arg0 context.Context, arg1, arg2, arg3 uint) (*models.MovieInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneMovieFromList", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.MovieInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneMovieFromList indicates an expected call of FindOneMovieFromList.
func (mr *MockStoreMockRecorder) FindOneMovieFromList(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneMovieFromList", reflect.TypeOf((*MockStore)(nil).FindOneMovieFromList), arg0, arg1, arg2, arg3)
}

// FindOneOwnerRoom mocks base method.
func (m *MockStore) FindOneOwnerRoom(arg0 context.Context, arg1, arg2 uint) (*models.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneOwnerRoom", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneOwnerRoom indicates an expected call of FindOneOwnerRoom.
func (mr *MockStoreMockRecorder) FindOneOwnerRoom(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneOwnerRoom", reflect.TypeOf((*MockStore)(nil).FindOneOwnerRoom), arg0, arg1, arg2)
}

// FindOnePostInfo mocks base method.
func (m *MockStore) FindOnePostInfo(arg0 context.Context, arg1 uint) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOnePostInfo", arg0, arg1)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOnePostInfo indicates an expected call of FindOnePostInfo.
func (mr *MockStoreMockRecorder) FindOnePostInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOnePostInfo", reflect.TypeOf((*MockStore)(nil).FindOnePostInfo), arg0, arg1)
}

// FindOnePostInfoWithUserLiked mocks base method.
func (m *MockStore) FindOnePostInfoWithUserLiked(arg0 context.Context, arg1, arg2 uint) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOnePostInfoWithUserLiked", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOnePostInfoWithUserLiked indicates an expected call of FindOnePostInfoWithUserLiked.
func (mr *MockStoreMockRecorder) FindOnePostInfoWithUserLiked(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOnePostInfoWithUserLiked", reflect.TypeOf((*MockStore)(nil).FindOnePostInfoWithUserLiked), arg0, arg1, arg2)
}

// FindOnePostLiked mocks base method.
func (m *MockStore) FindOnePostLiked(arg0 context.Context, arg1, arg2 uint) (*models.PostLiked, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOnePostLiked", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.PostLiked)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOnePostLiked indicates an expected call of FindOnePostLiked.
func (mr *MockStoreMockRecorder) FindOnePostLiked(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOnePostLiked", reflect.TypeOf((*MockStore)(nil).FindOnePostLiked), arg0, arg1, arg2)
}

// FindOneRoomMember mocks base method.
func (m *MockStore) FindOneRoomMember(arg0 context.Context, arg1, arg2 uint) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneRoomMember", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneRoomMember indicates an expected call of FindOneRoomMember.
func (mr *MockStoreMockRecorder) FindOneRoomMember(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneRoomMember", reflect.TypeOf((*MockStore)(nil).FindOneRoomMember), arg0, arg1, arg2)
}

// FindOneUserLikedMovie mocks base method.
func (m *MockStore) FindOneUserLikedMovie(arg0 context.Context, arg1, arg2 uint) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneUserLikedMovie", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneUserLikedMovie indicates an expected call of FindOneUserLikedMovie.
func (mr *MockStoreMockRecorder) FindOneUserLikedMovie(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneUserLikedMovie", reflect.TypeOf((*MockStore)(nil).FindOneUserLikedMovie), arg0, arg1, arg2)
}

// FindOneUserList mocks base method.
func (m *MockStore) FindOneUserList(arg0 context.Context, arg1, arg2 uint) (*models.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneUserList", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneUserList indicates an expected call of FindOneUserList.
func (mr *MockStoreMockRecorder) FindOneUserList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneUserList", reflect.TypeOf((*MockStore)(nil).FindOneUserList), arg0, arg1, arg2)
}

// FindPostComments mocks base method.
func (m *MockStore) FindPostComments(arg0 context.Context, arg1, arg2 uint, arg3, arg4 int) ([]*models.Comment, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPostComments", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*models.Comment)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindPostComments indicates an expected call of FindPostComments.
func (mr *MockStoreMockRecorder) FindPostComments(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPostComments", reflect.TypeOf((*MockStore)(nil).FindPostComments), arg0, arg1, arg2, arg3, arg4)
}

// FindReplyComments mocks base method.
func (m *MockStore) FindReplyComments(arg0 context.Context, arg1, arg2 uint, arg3, arg4 int) ([]*models.Comment, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindReplyComments", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*models.Comment)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindReplyComments indicates an expected call of FindReplyComments.
func (mr *MockStoreMockRecorder) FindReplyComments(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindReplyComments", reflect.TypeOf((*MockStore)(nil).FindReplyComments), arg0, arg1, arg2, arg3, arg4)
}

// FindRoomMembers mocks base method.
func (m *MockStore) FindRoomMembers(arg0 context.Context, arg1 uint) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoomMembers", arg0, arg1)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoomMembers indicates an expected call of FindRoomMembers.
func (mr *MockStoreMockRecorder) FindRoomMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoomMembers", reflect.TypeOf((*MockStore)(nil).FindRoomMembers), arg0, arg1)
}

// FindUserByEmail mocks base method.
func (m *MockStore) FindUserByEmail(arg0 context.Context, arg1 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockStoreMockRecorder) FindUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockStore)(nil).FindUserByEmail), arg0, arg1)
}

// FindUserByID mocks base method.
func (m *MockStore) FindUserByID(arg0 context.Context, arg1 uint) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByID", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByID indicates an expected call of FindUserByID.
func (mr *MockStoreMockRecorder) FindUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByID", reflect.TypeOf((*MockStore)(nil).FindUserByID), arg0, arg1)
}

// FindUserGenres mocks base method.
func (m *MockStore) FindUserGenres(arg0 context.Context, arg1 uint) (*[]models.GenreInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserGenres", arg0, arg1)
	ret0, _ := ret[0].(*[]models.GenreInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserGenres indicates an expected call of FindUserGenres.
func (mr *MockStoreMockRecorder) FindUserGenres(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserGenres", reflect.TypeOf((*MockStore)(nil).FindUserGenres), arg0, arg1)
}

// FindUserLists mocks base method.
func (m *MockStore) FindUserLists(arg0 context.Context, arg1 uint, arg2, arg3 int) ([]*models.List, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserLists", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*models.List)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindUserLists indicates an expected call of FindUserLists.
func (mr *MockStoreMockRecorder) FindUserLists(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserLists", reflect.TypeOf((*MockStore)(nil).FindUserLists), arg0, arg1, arg2, arg3)
}

// FindUserPosts mocks base method.
func (m *MockStore) FindUserPosts(arg0 context.Context, arg1, arg2 uint, arg3, arg4 int) ([]*models.Post, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserPosts", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindUserPosts indicates an expected call of FindUserPosts.
func (mr *MockStoreMockRecorder) FindUserPosts(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserPosts", reflect.TypeOf((*MockStore)(nil).FindUserPosts), arg0, arg1, arg2, arg3, arg4)
}

// GetFriendRequest mocks base method.
func (m *MockStore) GetFriendRequest(arg0 context.Context, arg1 uint, arg2, arg3 int) ([]*models.FriendNotification, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendRequest", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*models.FriendNotification)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFriendRequest indicates an expected call of GetFriendRequest.
func (mr *MockStoreMockRecorder) GetFriendRequest(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendRequest", reflect.TypeOf((*MockStore)(nil).GetFriendRequest), arg0, arg1, arg2, arg3)
}

// GetFriendRoomList mocks base method.
func (m *MockStore) GetFriendRoomList(arg0 context.Context, arg1 uint) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendRoomList", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendRoomList indicates an expected call of GetFriendRoomList.
func (mr *MockStoreMockRecorder) GetFriendRoomList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendRoomList", reflect.TypeOf((*MockStore)(nil).GetFriendRoomList), arg0, arg1)
}

// GetFriendsList mocks base method.
func (m *MockStore) GetFriendsList(arg0 context.Context, arg1 uint) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendsList", arg0, arg1)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendsList indicates an expected call of GetFriendsList.
func (mr *MockStoreMockRecorder) GetFriendsList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendsList", reflect.TypeOf((*MockStore)(nil).GetFriendsList), arg0, arg1)
}

// GetRoomLatestMessage mocks base method.
func (m *MockStore) GetRoomLatestMessage(arg0 context.Context, arg1 uint) ([]models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomLatestMessage", arg0, arg1)
	ret0, _ := ret[0].([]models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomLatestMessage indicates an expected call of GetRoomLatestMessage.
func (mr *MockStoreMockRecorder) GetRoomLatestMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomLatestMessage", reflect.TypeOf((*MockStore)(nil).GetRoomLatestMessage), arg0, arg1)
}

// GetRoomMessage mocks base method.
func (m *MockStore) GetRoomMessage(arg0 context.Context, arg1, arg2 uint, arg3, arg4 int) ([]*models.Message, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomMessage", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*models.Message)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRoomMessage indicates an expected call of GetRoomMessage.
func (mr *MockStoreMockRecorder) GetRoomMessage(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomMessage", reflect.TypeOf((*MockStore)(nil).GetRoomMessage), arg0, arg1, arg2, arg3, arg4)
}

// GetRoomUsers mocks base method.
func (m *MockStore) GetRoomUsers(arg0 context.Context, arg1 uint) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomUsers", arg0, arg1)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomUsers indicates an expected call of GetRoomUsers.
func (mr *MockStoreMockRecorder) GetRoomUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomUsers", reflect.TypeOf((*MockStore)(nil).GetRoomUsers), arg0, arg1)
}

// GetUserActiveRooms mocks base method.
func (m *MockStore) GetUserActiveRooms(arg0 context.Context, arg1 uint) ([]models.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserActiveRooms", arg0, arg1)
	ret0, _ := ret[0].([]models.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserActiveRooms indicates an expected call of GetUserActiveRooms.
func (mr *MockStoreMockRecorder) GetUserActiveRooms(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserActiveRooms", reflect.TypeOf((*MockStore)(nil).GetUserActiveRooms), arg0, arg1)
}

// GetUserLikedMovies mocks base method.
func (m *MockStore) GetUserLikedMovies(arg0 context.Context, arg1 uint, arg2, arg3 int) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLikedMovies", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserLikedMovies indicates an expected call of GetUserLikedMovies.
func (mr *MockStoreMockRecorder) GetUserLikedMovies(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLikedMovies", reflect.TypeOf((*MockStore)(nil).GetUserLikedMovies), arg0, arg1, arg2, arg3)
}

// GetUserRooms mocks base method.
func (m *MockStore) GetUserRooms(arg0 context.Context, arg1 uint) ([]*models.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRooms", arg0, arg1)
	ret0, _ := ret[0].([]*models.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRooms indicates an expected call of GetUserRooms.
func (mr *MockStoreMockRecorder) GetUserRooms(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRooms", reflect.TypeOf((*MockStore)(nil).GetUserRooms), arg0, arg1)
}

// GetUserRoomsWithMembers mocks base method.
func (m *MockStore) GetUserRoomsWithMembers(arg0 context.Context, arg1 uint) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoomsWithMembers", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoomsWithMembers indicates an expected call of GetUserRoomsWithMembers.
func (mr *MockStoreMockRecorder) GetUserRoomsWithMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoomsWithMembers", reflect.TypeOf((*MockStore)(nil).GetUserRoomsWithMembers), arg0, arg1)
}

// InsertMovieToList mocks base method.
func (m *MockStore) InsertMovieToList(arg0 context.Context, arg1, arg2, arg3 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMovieToList", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMovieToList indicates an expected call of InsertMovieToList.
func (mr *MockStoreMockRecorder) InsertMovieToList(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMovieToList", reflect.TypeOf((*MockStore)(nil).InsertMovieToList), arg0, arg1, arg2, arg3)
}

// InsertOneCommentLike mocks base method.
func (m *MockStore) InsertOneCommentLike(arg0 context.Context, arg1, arg2, arg3 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOneCommentLike", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOneCommentLike indicates an expected call of InsertOneCommentLike.
func (mr *MockStoreMockRecorder) InsertOneCommentLike(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOneCommentLike", reflect.TypeOf((*MockStore)(nil).InsertOneCommentLike), arg0, arg1, arg2, arg3)
}

// InsertOneCommentLikeNotification mocks base method.
func (m *MockStore) InsertOneCommentLikeNotification(arg0 context.Context, arg1, arg2, arg3, arg4 uint, arg5 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOneCommentLikeNotification", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOneCommentLikeNotification indicates an expected call of InsertOneCommentLikeNotification.
func (mr *MockStoreMockRecorder) InsertOneCommentLikeNotification(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOneCommentLikeNotification", reflect.TypeOf((*MockStore)(nil).InsertOneCommentLikeNotification), arg0, arg1, arg2, arg3, arg4, arg5)
}

// InsertOneCommentNotification mocks base method.
func (m *MockStore) InsertOneCommentNotification(arg0 context.Context, arg1, arg2, arg3, arg4 uint, arg5 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOneCommentNotification", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOneCommentNotification indicates an expected call of InsertOneCommentNotification.
func (mr *MockStoreMockRecorder) InsertOneCommentNotification(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOneCommentNotification", reflect.TypeOf((*MockStore)(nil).InsertOneCommentNotification), arg0, arg1, arg2, arg3, arg4, arg5)
}

// InsertOneFriendNotification mocks base method.
func (m *MockStore) InsertOneFriendNotification(arg0 context.Context, arg1 uint, arg2 *models.User) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOneFriendNotification", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOneFriendNotification indicates an expected call of InsertOneFriendNotification.
func (mr *MockStoreMockRecorder) InsertOneFriendNotification(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOneFriendNotification", reflect.TypeOf((*MockStore)(nil).InsertOneFriendNotification), arg0, arg1, arg2)
}

// InsertOneMessage mocks base method.
func (m *MockStore) InsertOneMessage(arg0 context.Context, arg1, arg2 uint, arg3, arg4 string, arg5 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOneMessage", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOneMessage indicates an expected call of InsertOneMessage.
func (mr *MockStoreMockRecorder) InsertOneMessage(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOneMessage", reflect.TypeOf((*MockStore)(nil).InsertOneMessage), arg0, arg1, arg2, arg3, arg4, arg5)
}

// InsertOnePostLikeNotification mocks base method.
func (m *MockStore) InsertOnePostLikeNotification(arg0 context.Context, arg1, arg2, arg3 uint, arg4 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOnePostLikeNotification", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOnePostLikeNotification indicates an expected call of InsertOnePostLikeNotification.
func (mr *MockStoreMockRecorder) InsertOnePostLikeNotification(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOnePostLikeNotification", reflect.TypeOf((*MockStore)(nil).InsertOnePostLikeNotification), arg0, arg1, arg2, arg3, arg4)
}

// InsertOneReplyCommentNotification mocks base method.
func (m *MockStore) InsertOneReplyCommentNotification(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 uint, arg6 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOneReplyCommentNotification", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOneReplyCommentNotification indicates an expected call of InsertOneReplyCommentNotification.
func (mr *MockStoreMockRecorder) InsertOneReplyCommentNotification(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOneReplyCommentNotification", reflect.TypeOf((*MockStore)(nil).InsertOneReplyCommentNotification), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// InsertOneRoom mocks base method.
func (m *MockStore) InsertOneRoom(arg0 context.Context, arg1, arg2 string, arg3 uint) (*models.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOneRoom", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOneRoom indicates an expected call of InsertOneRoom.
func (mr *MockStoreMockRecorder) InsertOneRoom(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOneRoom", reflect.TypeOf((*MockStore)(nil).InsertOneRoom), arg0, arg1, arg2, arg3)
}

// IsFriend mocks base method.
func (m *MockStore) IsFriend(arg0 context.Context, arg1, arg2 uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFriend", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFriend indicates an expected call of IsFriend.
func (mr *MockStoreMockRecorder) IsFriend(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFriend", reflect.TypeOf((*MockStore)(nil).IsFriend), arg0, arg1, arg2)
}

// JoinOneRoom mocks base method.
func (m *MockStore) JoinOneRoom(arg0 context.Context, arg1 uint, arg2 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinOneRoom", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinOneRoom indicates an expected call of JoinOneRoom.
func (mr *MockStoreMockRecorder) JoinOneRoom(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinOneRoom", reflect.TypeOf((*MockStore)(nil).JoinOneRoom), arg0, arg1, arg2)
}

// LeaveOneRoom mocks base method.
func (m *MockStore) LeaveOneRoom(arg0 context.Context, arg1 uint, arg2 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveOneRoom", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveOneRoom indicates an expected call of LeaveOneRoom.
func (mr *MockStoreMockRecorder) LeaveOneRoom(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveOneRoom", reflect.TypeOf((*MockStore)(nil).LeaveOneRoom), arg0, arg1, arg2)
}

// RemoveFriend mocks base method.
func (m *MockStore) RemoveFriend(arg0 context.Context, arg1, arg2 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFriend", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFriend indicates an expected call of RemoveFriend.
func (mr *MockStoreMockRecorder) RemoveFriend(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFriend", reflect.TypeOf((*MockStore)(nil).RemoveFriend), arg0, arg1, arg2)
}

// RemoveMovieFromList mocks base method.
func (m *MockStore) RemoveMovieFromList(arg0 context.Context, arg1, arg2, arg3 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMovieFromList", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMovieFromList indicates an expected call of RemoveMovieFromList.
func (mr *MockStoreMockRecorder) RemoveMovieFromList(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMovieFromList", reflect.TypeOf((*MockStore)(nil).RemoveMovieFromList), arg0, arg1, arg2, arg3)
}

// RemoveMoviesFromList mocks base method.
func (m *MockStore) RemoveMoviesFromList(arg0 context.Context, arg1 []uint, arg2, arg3 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMoviesFromList", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMoviesFromList indicates an expected call of RemoveMoviesFromList.
func (mr *MockStoreMockRecorder) RemoveMoviesFromList(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMoviesFromList", reflect.TypeOf((*MockStore)(nil).RemoveMoviesFromList), arg0, arg1, arg2, arg3)
}

// RemoveOneCommentLike mocks base method.
func (m *MockStore) RemoveOneCommentLike(arg0 context.Context, arg1, arg2, arg3 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOneCommentLike", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveOneCommentLike indicates an expected call of RemoveOneCommentLike.
func (mr *MockStoreMockRecorder) RemoveOneCommentLike(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOneCommentLike", reflect.TypeOf((*MockStore)(nil).RemoveOneCommentLike), arg0, arg1, arg2, arg3)
}

// RemoveOneRoom mocks base method.
func (m *MockStore) RemoveOneRoom(arg0 context.Context, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOneRoom", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveOneRoom indicates an expected call of RemoveOneRoom.
func (mr *MockStoreMockRecorder) RemoveOneRoom(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOneRoom", reflect.TypeOf((*MockStore)(nil).RemoveOneRoom), arg0, arg1)
}

// RemoveUserLikedMovie mocks base method.
func (m *MockStore) RemoveUserLikedMovie(arg0 context.Context, arg1, arg2 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserLikedMovie", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserLikedMovie indicates an expected call of RemoveUserLikedMovie.
func (mr *MockStoreMockRecorder) RemoveUserLikedMovie(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserLikedMovie", reflect.TypeOf((*MockStore)(nil).RemoveUserLikedMovie), arg0, arg1, arg2)
}

// ResetCommentNotification mocks base method.
func (m *MockStore) ResetCommentNotification(arg0 context.Context, arg1 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetCommentNotification", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetCommentNotification indicates an expected call of ResetCommentNotification.
func (mr *MockStoreMockRecorder) ResetCommentNotification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetCommentNotification", reflect.TypeOf((*MockStore)(nil).ResetCommentNotification), arg0, arg1)
}

// ResetFriendNotification mocks base method.
func (m *MockStore) ResetFriendNotification(arg0 context.Context, arg1 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetFriendNotification", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetFriendNotification indicates an expected call of ResetFriendNotification.
func (mr *MockStoreMockRecorder) ResetFriendNotification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetFriendNotification", reflect.TypeOf((*MockStore)(nil).ResetFriendNotification), arg0, arg1)
}

// ResetLikesNotification mocks base method.
func (m *MockStore) ResetLikesNotification(arg0 context.Context, arg1 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetLikesNotification", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetLikesNotification indicates an expected call of ResetLikesNotification.
func (mr *MockStoreMockRecorder) ResetLikesNotification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetLikesNotification", reflect.TypeOf((*MockStore)(nil).ResetLikesNotification), arg0, arg1)
}

// UpdateComment mocks base method.
func (m *MockStore) UpdateComment(arg0 context.Context, arg1 *models.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockStoreMockRecorder) UpdateComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockStore)(nil).UpdateComment), arg0, arg1)
}

// UpdateCommentCount mocks base method.
func (m *MockStore) UpdateCommentCount(arg0 context.Context, arg1 *models.Comment, arg2 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCommentCount", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCommentCount indicates an expected call of UpdateCommentCount.
func (mr *MockStoreMockRecorder) UpdateCommentCount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCommentCount", reflect.TypeOf((*MockStore)(nil).UpdateCommentCount), arg0, arg1, arg2)
}

// UpdateCommentNotification mocks base method.
func (m *MockStore) UpdateCommentNotification(arg0 context.Context, arg1 *models.User, arg2 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCommentNotification", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCommentNotification indicates an expected call of UpdateCommentNotification.
func (mr *MockStoreMockRecorder) UpdateCommentNotification(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCommentNotification", reflect.TypeOf((*MockStore)(nil).UpdateCommentNotification), arg0, arg1, arg2)
}

// UpdateFriendNotification mocks base method.
func (m *MockStore) UpdateFriendNotification(arg0 context.Context, arg1 *models.User, arg2 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFriendNotification", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFriendNotification indicates an expected call of UpdateFriendNotification.
func (mr *MockStoreMockRecorder) UpdateFriendNotification(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFriendNotification", reflect.TypeOf((*MockStore)(nil).UpdateFriendNotification), arg0, arg1, arg2)
}

// UpdateIsRead mocks base method.
func (m *MockStore) UpdateIsRead(arg0 context.Context, arg1 uint, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIsRead", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIsRead indicates an expected call of UpdateIsRead.
func (mr *MockStoreMockRecorder) UpdateIsRead(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIsRead", reflect.TypeOf((*MockStore)(nil).UpdateIsRead), arg0, arg1, arg2)
}

// UpdateLastSender mocks base method.
func (m *MockStore) UpdateLastSender(arg0 context.Context, arg1, arg2 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastSender", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastSender indicates an expected call of UpdateLastSender.
func (mr *MockStoreMockRecorder) UpdateLastSender(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastSender", reflect.TypeOf((*MockStore)(nil).UpdateLastSender), arg0, arg1, arg2)
}

// UpdateLikesNotification mocks base method.
func (m *MockStore) UpdateLikesNotification(arg0 context.Context, arg1 *models.User, arg2 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLikesNotification", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLikesNotification indicates an expected call of UpdateLikesNotification.
func (mr *MockStoreMockRecorder) UpdateLikesNotification(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLikesNotification", reflect.TypeOf((*MockStore)(nil).UpdateLikesNotification), arg0, arg1, arg2)
}

// UpdateList mocks base method.
func (m *MockStore) UpdateList(arg0 context.Context, arg1 *models.List) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateList", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateList indicates an expected call of UpdateList.
func (mr *MockStoreMockRecorder) UpdateList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateList", reflect.TypeOf((*MockStore)(nil).UpdateList), arg0, arg1)
}

// UpdatePostInfo mocks base method.
func (m *MockStore) UpdatePostInfo(arg0 context.Context, arg1 *models.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePostInfo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePostInfo indicates an expected call of UpdatePostInfo.
func (mr *MockStoreMockRecorder) UpdatePostInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePostInfo", reflect.TypeOf((*MockStore)(nil).UpdatePostInfo), arg0, arg1)
}

// UpdateRoomActiveState mocks base method.
func (m *MockStore) UpdateRoomActiveState(arg0 context.Context, arg1, arg2 uint, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoomActiveState", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoomActiveState indicates an expected call of UpdateRoomActiveState.
func (mr *MockStoreMockRecorder) UpdateRoomActiveState(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoomActiveState", reflect.TypeOf((*MockStore)(nil).UpdateRoomActiveState), arg0, arg1, arg2, arg3)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 uint, arg2 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1, arg2)
}

// UpdateUserGenres mocks base method.
func (m *MockStore) UpdateUserGenres(arg0 context.Context, arg1 []uint, arg2 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserGenres", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserGenres indicates an expected call of UpdateUserGenres.
func (mr *MockStoreMockRecorder) UpdateUserGenres(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserGenres", reflect.TypeOf((*MockStore)(nil).UpdateUserGenres), arg0, arg1, arg2)
}
