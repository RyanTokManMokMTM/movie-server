// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	UserMovieList "github.com/ryantokmanmokmtm/movie-server/internal/handler/UserMovieList"
	health "github.com/ryantokmanmokmtm/movie-server/internal/handler/health"
	listDetail "github.com/ryantokmanmokmtm/movie-server/internal/handler/listDetail"
	movie "github.com/ryantokmanmokmtm/movie-server/internal/handler/movie"
	user "github.com/ryantokmanmokmtm/movie-server/internal/handler/user"
	"github.com/ryantokmanmokmtm/movie-server/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/ping",
				Handler: health.HealthCheckHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/login",
				Handler: user.UserLoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/signup",
				Handler: user.UserSignUpHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/user/info/:id",
				Handler: user.UserInfoHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/user/profile",
				Handler: user.UserProfileHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/movies/genre/list",
				Handler: movie.MoviePageListByGenreHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/movies/genres",
				Handler: movie.MovieGenreByMovieIDHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/list/detail/:list_id",
				Handler: listDetail.GetListMoviesHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/list/movie/create",
				Handler: listDetail.CreateListMovieHandler(serverCtx),
			},
			{
				Method:  http.MethodPatch,
				Path:    "/list/movie/update",
				Handler: listDetail.UpdateListMovieHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/list/movie/delete",
				Handler: listDetail.DeleteListMovieHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/list/lists",
				Handler: UserMovieList.GetAllListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/list/create",
				Handler: UserMovieList.CreateUserMovieListHandler(serverCtx),
			},
			{
				Method:  http.MethodPatch,
				Path:    "/list/update",
				Handler: UserMovieList.UpdateUserMovieListHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/list/delete",
				Handler: UserMovieList.DeleteUserMovieListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list/user/lists",
				Handler: UserMovieList.GetUserListHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)
}
